# .github/workflows/docker-push.yml
name: Build and Push Docker Image to ACR

# 触发条件：当 'main' 分支有 push 事件时触发
on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    # 运行环境：使用 GitHub 提供的最新版 Ubuntu 虚拟机
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      # 将你的仓库代码下载到虚拟机中
      - name: Checkout repository
        uses: actions/checkout@v3

      # 步骤 2: 设置 QEMU (用于模拟不同 CPU 架构，确保兼容性)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 步骤 3: 设置 Docker Buildx (Docker 的下一代构建引擎)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 步骤 4: 登录到阿里云 ACR
      # 使用我们之前在 GitHub Secrets 中设置的凭证
      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 步骤 5: 构建 Docker 镜像并推送到 ACR
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          # 构建上下文：使用当前目录 (.)
          context: .
          # Dockerfile 路径
          file: ./Dockerfile
          # 推送镜像到仓库
          push: true
          # 镜像标签 (Tags):
          # 1. 'latest' 标签：总是指向最新的版本
          # 2. 'commit SHA' 标签：为每次提交生成一个唯一的版本标签 (方便回滚)
          # 【注意】请确认这里的命名空间 'aliyun6476841098' 是正确的
          tags: |
            crpi-ulb3rnkr6ld326as.cn-hangzhou.personal.cr.aliyuncs.com/${{ secrets.ACR_USERNAME }}/ai-travel-planner:latest
            crpi-ulb3rnkr6ld326as.cn-hangzhou.personal.cr.aliyuncs.com/${{ secrets.ACR_USERNAME }}/ai-travel-planner:${{ github.sha }}
          # 启用 GitHub Actions 的缓存，加快后续构建速度
          cache-from: type=gha
          cache-to: type=gha,mode=max